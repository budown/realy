(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{291:function(t,v,_){"use strict";_.r(v);var a=_(14),s=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"进程线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程线程"}},[t._v("#")]),t._v(" 进程线程")]),t._v(" "),v("h2",{attrs:{id:"进程和线程的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程的区别"}},[t._v("#")]),t._v(" 进程和线程的区别")]),t._v(" "),v("p",[t._v("进程是资源分配的基本单位，进程中包含可执行的代码，打开的文件描述符，进程状态，内存地址空间等")]),t._v(" "),v("p",[t._v("进程是在内存中运行的应用程序，每个进程都有独立的内存空间")]),t._v(" "),v("p",[t._v("而线程是比进程更小的执行单位，是进程中的活动的对象，一个进程可以有多个线程，每个线程都有独立的计数器，堆栈和寄存器")]),t._v(" "),v("p",[t._v("那么，有了进程为何还要有线程")]),t._v(" "),v("p",[t._v("在一个进程中会有多个活动的任务，如果只有一个调度来执行这些任务，那么当某个任务被阻塞的时候，其他的任务就得不到执行，因此需要多个独立的调度单元来使这些任务可以并行的执行，这些个单元就是线程")]),t._v(" "),v("p",[t._v("线程比进程更轻量，更快的创建销毁，线程之间的切换开销也小，由于进程拥有大量的资源之后，当切换到另外一个进程的时候，需要保存当前进程的所有资源，而线程之间的切换只需要保存当前的堆栈和寄存器内容")]),t._v(" "),v("p",[t._v("那么什么是协程")]),t._v(" "),v("p",[t._v("协程是用户态的一种轻量级的线程，也就是不是由操作系统内核来管理的，而是由用户应用程序来管理的")]),t._v(" "),v("p",[t._v("协程的创建开销很小，相比于进程或者线程的上下文切换，协程几乎没有切换的开销，因为协程的调度就是用户程序来控制的，只需要保存任务的上下文，并不涉及内核资源的保存和恢复")]),t._v(" "),v("h2",{attrs:{id:"并发和并行"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#并发和并行"}},[t._v("#")]),t._v(" 并发和并行")]),t._v(" "),v("p",[t._v("同一个 CPU 在同一时刻只能执行一个任务命令")]),t._v(" "),v("p",[t._v("并发是一段时间内可以同时运行多个程序，因为时间短，所以看起来是在同时执行，实际上是 CPU 在多个程序之间快速进行切换，但是在某一时刻只有一个任务在执行")]),t._v(" "),v("p",[t._v("并行是同一时刻运行多个程序，是真正意义上的并发")]),t._v(" "),v("h2",{attrs:{id:"进程间通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信"}},[t._v("#")]),t._v(" 进程间通信")]),t._v(" "),v("p",[t._v("管道")]),t._v(" "),v("p",[t._v("消息队列")]),t._v(" "),v("p",[t._v("信号")]),t._v(" "),v("p",[t._v("共享内存")]),t._v(" "),v("h2",{attrs:{id:"僵尸和孤儿"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#僵尸和孤儿"}},[t._v("#")]),t._v(" 僵尸和孤儿")])])}),[],!1,null,null,null);v.default=s.exports}}]);